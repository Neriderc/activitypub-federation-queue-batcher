---
- name: Set up front proxy
  hosts: all

  gather_facts: false
  pre_tasks:
    - name: Assert that Ansible version is >= 2.11.0
      delegate_to: localhost
      ansible.builtin.assert:
        that:
          - "ansible_version.full is version('2.11.0', '>=')"
        fail_msg: "This playbook requires Ansible 2.11.0 or higher"
      become: false

    - name: Install python for Ansible
      ansible.builtin.raw: test -e /usr/bin/python || test -e /usr/bin/python3 || (apt -y update && apt install -y python3-minimal python3-setuptools)
      args:
        executable: /bin/bash
      register: output
      changed_when: output.stdout != ''

    - name: Gather facts
      ansible.builtin.setup:

  handlers:
    - name: Reload nginx.service
      ansible.builtin.systemd:
        name: nginx
        state: reloaded

  tasks:
    - name: Install dependencies
      ansible.builtin.apt:
        name:
          - curl
          - gnupg
          - apt-transport-https
        cache_valid_time: 86400

    - name: /etc/apt/keyrings/
      ansible.builtin.file:
        path: /etc/apt/keyrings/
        state: directory
        mode: "0755"

    - name: Download Docker GPG Key
      ansible.builtin.get_url:
        url: https://download.docker.com/linux/{{ ansible_distribution | lower }}/gpg
        dest: /etc/apt/keyrings/docker.asc
        checksum: sha256:1500c1f56fa9e26b9b8f42452a553675796ade0807cdce11975eb98170b3a570
        mode: "0644"

    - name: Get architecture using dpkg
      ansible.builtin.command: dpkg --print-architecture
      register: dpkg_output
      changed_when: false

    - name: Add Docker apt repo
      ansible.builtin.apt_repository:
        repo: >-
          deb [arch={{ dpkg_output.stdout }} signed-by=/etc/apt/keyrings/docker.asc]
          https://download.docker.com/linux/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} stable
        filename: /etc/apt/sources.list.d/docker.list

    - name: Install packages
      ansible.builtin.apt:
        name:
          - nginx
          - ca-certificates
          - certbot
          - python3-certbot-nginx
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose-plugin
        cache_valid_time: 86400

    - name: Request initial letsencrypt certificate
      ansible.builtin.command:
        argv:
          - certbot
          - certonly
          - --nginx
          - --agree-tos
          - --cert-name
          - "{{ domain }}"
          - -d
          - "{{ domain }}"
          - --register-unsafely-without-email
      args:
        creates: "/etc/letsencrypt/live/{{ domain }}/privkey.pem"

    - name: Distribute nginx configuration
      ansible.builtin.template:
        src: ./nginx.conf.j2
        dest: /etc/nginx/nginx.conf
        owner: root
        group: root
        mode: "0644"
        validate: nginx -c %s -t
      diff: true
      notify: Reload nginx.service

    - name: Enable and start docker service
      ansible.builtin.systemd:
        name: docker.service
        enabled: true
        state: started

    - name: Create folder /opt/apub-queue-batcher
      ansible.builtin.file:
        path: /opt/apub-queue-batcher/
        owner: root
        mode: "0755"
        state: directory

    - name: Distribute docker-compose configuration
      ansible.builtin.template:
        src: ./docker-compose.yml.j2
        dest: /opt/apub-queue-batcher/docker-compose.yml
        owner: root
        group: root
        mode: "0644"
      diff: true

    - name: Start docker-compose
      community.docker.docker_compose_v2:
        project_src: /opt/apub-queue-batcher/
        state: present
        pull: always
        remove_orphans: true

    - name: Certbot renewal cronjob
      ansible.builtin.cron:
        special_time: daily
        name: certbot-renew
        user: root
        job: "certbot certonly --nginx --cert-name '{{ domain }}' -d '{{ domain }}' --deploy-hook 'systemctl reload nginx.service'"
